//**********************************************
//**********************************************
//EJERCICIOS DE INTRODUCCIÃ“N A SWIFT
//CARLOS PARRA
//COMPUTACIÓN MÓVIL
//PONTIFICIA UNIVERSIDAD JAVERIANA BOGOTÁ
//**********************************************
//**********************************************



//**********************************************
//TIPOS DE DATOS
//**********************************************
let etiqueta = "el precio es: "  //DefiniciÃ³n implicita de String
let valor = 90.0 //DefiniciÃ³n implicita de Double
let todo = etiqueta + String(valor) // Cast de Double a String
print(todo)

//**********************************************
//CADENAS INTERPOLACION
//**********************************************
let manzanas = 5
let peras = 7
let frase = "Tengo \(manzanas) manzanas y \(peras) peras"
print(frase)

let textoMultiLinea = """
Este es un texto multilinea
"Tengo \(manzanas) manzanas y \(peras) peras"
"""
print(textoMultiLinea)


//**********************************************
//ARREGLOS Y DICCIONARIOS
//**********************************************
//Array
var myArray = ["Hola", "Mundo", "hello", "world"]
print(myArray)
myArray[0] = "Bonjour"
print(myArray)

//Dictionary
var myDictionary = ["iMac":1500, "iPhone":1000, "Macbook":1700]
print(myDictionary)
myDictionary["iPhone"]=1100 //Nuevos precios
print(myDictionary)

//Sin inicializacion, se deben definir los tipos
var myArrayNoData = [String]()
var myDictionaryNoData = [String:Int]()

let notasIndividuales = [2.5, 3.9, 2.0, 4.5, 5]
var pasaron=0
var perdieron = Int(0) //var perdieron:Int=0
for nota in notasIndividuales {
    if  nota<3.0 {
        perdieron+=1
    }else {
        pasaron+=1
    }
}
print("\(pasaron) estudiantes pasaron")
print("\(perdieron) estudiantes perdieron")


//**********************************************
//OPTIONALS
//**********************************************
var optionalString: String? //= "Pika"
print(optionalString == nil)
print(optionalString)
if let greeting = optionalString {
    print("Hola \(greeting)")
} else {
    print ("Hola anÃ³nimo")
}

let nickName:String? = "Pika"
let fullName = "John Appleseed"
print("Hola \(nickName ?? fullName)")

//Unrwapping optional
var algoOpcional : String? = "Hola"

//if let
if let algo = algoOpcional {
    print("la cadena es: \(algo)")
} else {
    print("el valor era nil")
}

//Guard
func printCadena (cadena:String?)  {
    guard let myCadena = cadena else {
        print("La cadena llego nula")
        return
    }
    print(myCadena.count)
}
printCadena(cadena: algoOpcional)

//Force unwrapping
let forced = algoOpcional!
print(forced)
//Optional Chaining
struct Car {
    var model:Int
    var brand:String
}
var myCar:Car? //= Car(model: 2018, brand: "Renault")
if let model = myCar?.model {
    print(model+1)
}


//**********************************************
//SWITCHES
//**********************************************
let mascota = "gato persa"
switch(mascota) {
    case "perro beagle":
        print("ðŸ¶")
    case "perro poddle":
        print("ðŸ©")
    case "gato":
        print("ðŸ±")
    case let x where x.hasSuffix("persa"):
        print("ðŸˆ")
    default:
        print("ðŸŒ³")
}



//**********************************************
//ITERACION DICCIONARIOS
//**********************************************
let interestingNumbers = [
    "prime": [2, 3, 5, 7, 11, 13, 17],
    "fibonacci": [1, 1, 2, 3, 5, 8, 13, 21, 34, 55],
    "square": [1, 4, 9, 16, 25, 36, 49]
]
var largest = 0
var kindLargest:String? = nil
for(kind, numbers) in interestingNumbers{
    for number in numbers{
        if (number > largest){
            kindLargest = kind
            largest = number
        }
    }
}
print("NÃºmero mÃ¡s largo \(largest) de tipo \(kindLargest ?? "ninguno")")



//**********************************************
//LOOPS - COUNTABLE RANGE
//**********************************************
var n = 2
while n < 100 {
    n *= 2
}
print(n)

var m=2
repeat {
    m *= 2
}while m<100
print(m)

for i in 0...10{  // <=
    print(i)
}
for i in 0..<10{ // <
    print(i)
}

for i in stride(from: 5.5, to: 10.2, by:0.4){
    print(i)
}



//**********************************************
//FUNCIONES
//**********************************************
func saludo(nombre:String, dia:String) -> String {
    return "Hola \(nombre), hoy es: \(dia)"
}
print(saludo(nombre: "Carlos", dia: "Jueves"))

func saludoEtiqueta(para nombre:String, el dia:String) -> String {
    return "Hola \(nombre), hoy es: \(dia)"
}
print(saludoEtiqueta(para: "Carlos", el: "Jueves"))


func saludoEtiquetaParcial(_ nombre:String, el dia:String) -> String {
    return "Hola \(nombre), hoy es: \(dia)"
}
print(saludoEtiquetaParcial("Carlos", el: "Jueves"))



//**********************************************
//TUPLAS
//**********************************************

func estadisticas (valores: [Int]) -> (min:Int, max:Int, sum:Int){
    var min = valores[0]
    var max = valores[0]
    var sum = 0
    for valor in valores{
        if valor > max{
            max = valor
        } else if valor < min{
            min = valor
        }
        sum += valor
    }
    return (min, max, sum)
}
let estadistica = estadisticas (valores: [5, 3, 100, 3, 9])
print(estadistica.min)
print(estadistica.max)
print(estadistica.sum)
print(estadistica.2)



//**********************************************
//PROGRAMACIÃ“N FUNCIONAL
//**********************************************

func hacerIncremento () -> ((Int) -> Int) {
    let cant = 5
    func sumar (valor:Int)->Int{
        return valor + cant
    }
    return sumar
}
let incremento = hacerIncremento() //valor de tipo funciÃ³n
print(incremento(8))


func hasAnyMatches(list: [Int], condition : (Int)->Bool)->Bool{
    for item in list {
        if (condition(item)){
            return true;
        }
    }
    return false
}
func lessThanTwenty (value:Int) -> Bool {
    if (value<20){
        return true
    }
    return false
}
let values = [11,43, 56, 12, 5, 6, 74]
print(hasAnyMatches(list: values, condition: lessThanTwenty))

//let values = [11,43, 56, 12, 5, 6, 74]
//FUNCIÓN COMO PARÁMETRO
func mySort (first:Int, second:Int) -> Bool{
    if(first>second){
        return true
    }
    return false
}
let sortedValues = values.sorted(by: mySort)
print(sortedValues)

//CLOSURE
let closureSorted = values.sorted(by: {(first:Int, second:Int)->Bool in
    if(first>second){
        return true;
    }
    return false
})
print(closureSorted)

//CLOSURE ABREVIADO
let shortClosureShorted = values.sorted(by: {$0>$1})
print(shortClosureShorted)

//CLOSURE ABREVIADO
let superShortClosure = values.sorted {$0>$1}
print(superShortClosure)


//**********************************************
//CLASES ESTRUCTURAS
//**********************************************
class Animal {
    var age : Int
    var name : String
    let status = "Alive"

    init(age: Int, name: String){
        self.age = age
        self.name = name
    }

    func description() -> String{
        return "Animal \(name) is \(age) years old"
    }
}
class Dog: Animal{
    let communicate = "brawls"
    var breed: String
    var health="OK"

    var ageInDogYears: Int{
        get{
            return self.age*7
        }
        set{
            self.age = newValue*7
        }
    }
    override var age: Int{
        didSet{
            if age > 12 {
                health="Check with Vet"
            }
        }
    }

    init(age: Int, name: String, breed:String){
        self.breed = breed
        super.init(age: age, name: name)
    }

    override func description() -> String {
        return "\(name) is a \(breed), it is \(age) years old which is \(ageInDogYears) in dog years."
    }

    func healthStatus() -> String {
        return "Health status \(health)"
    }
}
let animal = Animal(age: 5, name: "Nemo")
let dog = Dog(age: 6, name: "Marley", breed: "Labrador")
print(animal.description())
print(dog.description())

dog.age = 8
print(dog.description())
print(dog.healthStatus())

dog.age = 13
print(dog.healthStatus())



//**********************************************
//TALLER GATOS
//**********************************************
//6
protocol AnimalNadador {
    var distancia : Int {get}
    func nadar() -> String
}

//4
enum Food : String {
    case Concentrado, Leche, Atun
}
var aFood = Food.Atun
print("Value: \(aFood)")
print("Raw Value: \(aFood.rawValue)")

//1
class Cat : Animal{
    //5
    override var age : Int {
        willSet{
            if newValue < 10{
                self.food = Food.Concentrado
            } else if newValue >= 10 && newValue < 15 {
                self.food = Food.Leche
            } else {
                self.food = Food.Atun
            }
        }
    }
    //4
    var food : Food = Food.Concentrado
    //3
    var emoji : String {
        get{
            if(self.name.count<5){
                return "ðŸ±"
            } else {
                return "ðŸˆ"
            }
        }
    }
    //2
    override func description() -> String {
        return "Cat's name: \(name), age: \(age), it eats: \(food) "
    }
}
let ðŸ˜¸ = Cat(age: 5 , name: "Kittie")
print(ðŸ˜¸.description())
ðŸ˜¸.age = 10
print (ðŸ˜¸.description())

extension Cat : AnimalNadador {
    var distancia : Int { return 30 }
    func nadar() -> String {
        return "El gato \(self.name) puede nadar \(distancia) metros"
        
    }
}
print (ðŸ˜¸.nadar())



//**********************************************
//ENUMERACIONES
//**********************************************
enum Rank: Int {
    case ace = 1  // Start at one not at zero, the rest follow after
    case two, three, four , five, six, seven, eight, nine, ten
    case jack, queen, king
    func simpleDescription() -> String {
        switch(self){
            case .ace:
                return "ace"
            case .jack:
                return "jack"
            case .queen:
                return "queen"
            case .king:
                return "king"
            default:
                return String(self.rawValue)
        }
    }
}
let fourth = Rank.four
print(fourth)
let fourthRaw = fourth.rawValue
print(fourthRaw)

//invocaciÃ³n a init?(rawValue:)
if let newCard = Rank(rawValue: 11){
    print(newCard.simpleDescription())
}


//**********************************************
//CLASES VS ESTRUCTURAS
//**********************************************
class ComputerC{
    var brand = "apple"
    var ram = 8
    func description() -> String {
        return "Class: brand \(brand) and ram \(ram)"
    }
}
struct ComputerS{
    var brand = "apple"
    var ram = 8
    func description() -> String {
        return "Struct: brand \(brand) and ram \(ram)"
    }
}

var computerC = ComputerC()
print(computerC.description())
var newComputerC = computerC
newComputerC.ram=16
newComputerC.brand = "Dell"
print(computerC.description())

var computerS = ComputerS()
print(computerS.description())
var newComputerS = computerS
newComputerS.ram=16
newComputerS.brand = "Dell"
print(computerS.description())



//**********************************************
//PROTOCOLOS EXTENSIONES
//**********************************************

protocol ExampleProtocol {
    var simpleDescription: String { get }
    mutating func adjust()
}
class Clase: ExampleProtocol {
    var simpleDescription: String = "Algo"
    var anotherProperty: Int = 1234
    func adjust() {
        simpleDescription += " Now 100% adjusted"
    }
}
var a = Clase()
a.adjust()
print(a.simpleDescription)

extension Int: ExampleProtocol{
    var simpleDescription: String {
        return "The number \(self)"
    }
    mutating func adjust(){
        self += 42
    }
}
var number:Int = 7
print(number.simpleDescription)
number.adjust()
print(number.simpleDescription)



//**********************************************
//CLOSURES
//**********************************************
let carros = ["renault clio": 1500, "mazda 3": 2000, "bmw serie 3": 2500, "ford mustang": 4000]
let carrosFrugales = carros.filter{ $0.value<=2000 }
print(carrosFrugales)

let carrosTurbo = carros.map ({ (carro) in return carro.key+" turbo"})
let carrosTurbo2 = carros.map {$0.key+" Turbo"}
print(carrosTurbo)
print(carrosTurbo2)

let totalCC = carros.reduce(0, {(result, pair) in return result + pair.value})
print(totalCC)

let maxCC = carros.reduce (0,{(result, pair) in
    if result<pair.value{
        return pair.value
    }
    return result
})
print(maxCC)
                                                                                                                                                                                                                                                                                          67355910/contents.xcplayground                                                                      0000755 0000766 0000024 00000000245 13353255671 013234  0                                                                                                    ustar                                                                                                                                                                                                                                                          <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<playground version='5.0' target-platform='ios'>
    <timeline fileName='timeline.xctimeline'/>
</playground>                                                                                                                                                                                                                                                                                                                                                           67355910/playground.xcworkspace/contents.xcworkspacedata                                            0000755 0000766 0000024 00000000207 13252302564 020402  0                                                                                                    ustar                                                                                                                                                                                                                                                          <?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "self:">
   </FileRef>
</Workspace>
                                                                                                                                                                                                                                                                                                                                                                                         67355910/playground.xcworkspace/xcuserdata/                                                         0000755 0000766 0000024 00000000000 14315331425 015600  5                                                                                                    ustar                                                                                                                                                                                                                                                          67355910/playground.xcworkspace/xcshareddata/                                                       0000755 0000766 0000024 00000000000 14315331425 016070  5                                                                                                    ustar                                                                                                                                                                                                                                                          67355910/playground.xcworkspace/xcuserdata/andres.xcuserdatad/                                      0000755 0000766 0000024 00000000000 14315331442 021361  5                                                                                                    ustar                                                                                                                                                                                                                                                          67355910/playground.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist                               0000755 0000766 0000024 00000000356 13346510666 022566  0                                                                                                    ustar                                                                                                                                                                                                                                                          <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>
                                                                                                                                                                                                                                                                                  67355910/playground.xcworkspace/xcuserdata/andres.xcuserdatad/IDEFindNavigatorScopes.plist          0000755 0000766 0000024 00000000266 13346760361 026710  0                                                                                                    ustar                                                                                                                                                                                                                                                          <?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array/>
</plist>